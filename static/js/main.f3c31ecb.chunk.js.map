{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","text-capitalize","placeholder","value","onChange","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","key","id","App","state","uuid","editItm","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","seletctedItem","find","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAEqBA,E,iLACP,IAAD,EAEgDC,KAAKC,MAAnDC,EAFF,EAEEA,KAAMC,EAFR,EAEQA,aAAcC,EAFtB,EAEsBA,aAAcC,EAFpC,EAEoCA,SAEzC,OACI,yBAAKC,UAAU,uBACf,0BAAMC,SAAUH,GAChB,yBAAKE,UAAU,eACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,0CACf,uBAAGA,UAAU,kBAGb,2BAAOE,KAAK,OAAOF,UAAU,eAAeG,mBAAA,EAAgBC,YAAY,oBAAoBC,MAAOT,EACnGU,SAAUT,KAGV,4BAAQK,KAAK,SACbF,UACID,EACE,iCACA,kCAJN,IAKKA,EAAW,YAAc,WAL9B,W,GAlB2BQ,aCAlBC,E,iLACP,IAAD,EAEuCd,KAAKC,MAAzCc,EAFH,EAEGA,MAAOC,EAFV,EAEUA,aAAcC,EAFxB,EAEwBA,WAE7B,OAGI,wBAAIX,UAAU,sEAEd,4BAAKS,GACD,yBAAKT,UAAU,aAEf,0BAAMA,UAAU,oBAAoBY,QAASD,GAC7C,uBAAGX,UAAU,gBAEjB,0BAAMA,UAAU,mBAAmBY,QAASF,GACxC,uBAAGV,UAAU,wB,GAjBSO,aCCjBM,E,iLACP,IAAD,EAEkDnB,KAAKC,MAApDmB,EAFH,EAEGA,MAAOC,EAFV,EAEUA,UAAWL,EAFrB,EAEqBA,aAAcC,EAFnC,EAEmCA,WAExC,OACI,wBAAIX,UAAU,mBACd,wBAAIA,UAAU,+BAAd,aAGAc,EAAME,KAAI,SAAApB,GACF,OACA,kBAAC,EAAD,CACAqB,IAAKrB,EAAKsB,GACVT,MAAOb,EAAKa,MACZC,aAAc,kBAAMA,EAAad,EAAKsB,KACtCP,WAAY,kBAAMA,EAAWf,EAAKsB,UAM1C,4BAAQhB,KAAK,SAASF,UAAU,gDAAgDY,QAASG,GAAzF,mB,GAtB0BR,a,wBC+FvBY,E,2MAvFbC,MAAQ,CACNN,MAAO,GACPI,GAAIG,MACJzB,KAAK,GACL0B,SAAS,G,EAGXzB,aAAe,SAAC0B,GACd,EAAKC,SAAS,CACZ5B,KAAM2B,EAAEE,OAAOpB,S,EAInBP,aAAe,SAACyB,GACdA,EAAEG,iBAEJ,IAAMC,EAAU,CACdT,GAAI,EAAKE,MAAMF,GACfT,MAAO,EAAKW,MAAMxB,MAGhBgC,EAAY,sBAAO,EAAKR,MAAMN,OAAlB,CAAyBa,IAE3C,EAAKH,SAAS,CACZV,MAAOc,EACPhC,KAAK,GACLsB,GAAIG,MACJtB,UAAU,K,EAIZgB,UAAW,WACT,EAAKS,SAAS,CACZV,MAAM,M,EAIVJ,aAAe,SAACQ,GACd,IAAMW,EAAgB,EAAKT,MAAMN,MAAMgB,QAAO,SAAAlC,GAAI,OAAIA,EAAKsB,KAAOA,KAClE,EAAKM,SAAS,CACZV,MAAOe,K,EAIXlB,WAAa,SAACO,GACZ,IAAMW,EAAgB,EAAKT,MAAMN,MAAMgB,QAAO,SAAAlC,GAAI,OAAIA,EAAKsB,KAAOA,KAE5Da,EAAgB,EAAKX,MAAMN,MAAMkB,MAAK,SAAApC,GAAI,OAAIA,EAAKsB,KAAOA,KAEhEe,QAAQC,IAAIH,GAEZ,EAAKP,SAAS,CACZV,MAAOe,EACPjC,KAAMmC,EAActB,MAClBV,UAAU,EACVmB,GAAIA,K,wEAMR,OACE,yBAAKlB,UAAU,aACf,yBAAKA,UAAU,OACf,yBAAKA,UAAU,gCACf,wBAAIA,UAAU,+BAAd,cAEE,kBAAC,EAAD,CACAJ,KAAMF,KAAK0B,MAAMxB,KACjBC,aAAcH,KAAKG,aACnBC,aAAcJ,KAAKI,aACnBC,SAAUL,KAAK0B,MAAMrB,WAGrB,kBAAC,EAAD,CACAe,MAAOpB,KAAK0B,MAAMN,MAClBC,UAAWrB,KAAKqB,UAChBL,aAAchB,KAAKgB,aACnBC,WAAYjB,KAAKiB,oB,GAhFLJ,aCGE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f3c31ecb.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class TodoInput extends Component {\n    render() {\n\n        const {item, handleChange, handleSubmit, editItem } =this.props\n\n        return (\n            <div className=\"card card-body my-3\">\n            <form onSubmit={handleSubmit}>\n            <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n            <div className=\"input-group-text bg-primary text-white\">\n            <i className=\"fas fa-book\"></i>\n            </div>\n            </div>\n            <input type=\"text\" className=\"form-control\" text-capitalize placeholder=\"Add new ToDo Item\" value={item} \n            onChange={handleChange}\n            />\n            </div>\n            <button type=\"submit\" \n            className= {\n                editItem \n                ? \"btn btn-block btn-success mt-3\" \n                : \"btn btn-block btn-primary mt-3\"\n            }> { editItem ? 'Edit Item' : \"Add Item\" } </button>\n            </form>\n\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class TodoItem extends Component {\n    render() {\n\n        const { title, handleDelete, handleEdit } = this.props;\n\n        return (\n\n            \n            <li className=\"list-group-item text-capitaliz d-flex justify-content-between my-2\">\n\n            <h6>{title}</h6>\n                <div className=\"todo-icon\">\n\n                <span className=\"mx-2 text-success\" onClick={handleEdit}>\n                <i className=\"fas fa-pen\"></i></span>\n\n            <span className=\"mx-2 text-danger\" onClick={handleDelete}>\n                <i className=\"fas fa-trash\"></i></span>\n\n                </div>\n            </li>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport TodoItem from './TodoItem'\n\nexport default class TodoList extends Component {\n    render() {\n\n        const { items, clearList, handleDelete, handleEdit } = this.props;\n\n        return (\n            <ul className=\"list-group my-5\">\n            <h3 className=\"text-capitalize text-center\">Todo List</h3>\n\n            {\n            items.map(item => {\n                    return (\n                    <TodoItem \n                    key={item.id} \n                    title={item.title}\n                    handleDelete={() => handleDelete(item.id)}\n                    handleEdit={() => handleEdit(item.id)}\n                     />\n                    );\n                })\n            }\n\n            <button type=\"button\" className=\"btn btn-danger btn-block text-capitalize mt-5\" onClick={clearList}>Clear List</button>\n            </ul>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport TodoInput from './components/TodoInput'\nimport TodoList from './components/TodoList'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport uuid from 'uuid'\n\n\n\nclass App extends Component {\n\n  state = {\n    items: [],\n    id: uuid(),\n    item:\"\",\n    editItm: false\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      item: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => { \n    e.preventDefault();\n\n  const newItem = {\n    id: this.state.id,\n    title: this.state.item\n  }\n\nconst updatedItems = [...this.state.items, newItem];\n\nthis.setState({\n  items: updatedItems,\n  item:\"\",\n  id: uuid(),\n  editItem: false\n})\n  }\n\nclearList =() =>{\n  this.setState({\n    items:[]\n  })\n}\n\nhandleDelete = (id) => {\n  const filteredItems = this.state.items.filter(item => item.id !== id)\n  this.setState({\n    items: filteredItems\n  })\n}\n\nhandleEdit = (id) => {\n  const filteredItems = this.state.items.filter(item => item.id !== id)\n  \n  const seletctedItem = this.state.items.find(item => item.id === id)\n\n  console.log(seletctedItem);\n\n  this.setState({\n    items: filteredItems,\n    item: seletctedItem.title,\n      editItem: true,\n      id: id\n\n  })\n}  \n  \n  render() {\n  return (\n    <div className=\"container\">\n    <div className=\"row\">\n    <div className=\"col-10 mx-auto col-md-8 mt-4\">\n    <h3 className=\"text-capitalize text-center\">todo input</h3>\n\n      <TodoInput \n      item={this.state.item} \n      handleChange={this.handleChange} \n      handleSubmit={this.handleSubmit}\n      editItem={this.state.editItem}\n      />\n\n      <TodoList \n      items={this.state.items} \n      clearList={this.clearList} \n      handleDelete={this.handleDelete}\n      handleEdit={this.handleEdit}\n      />\n    </div>\n    </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}